#In python, we handle exceptions using a block called a try-except which wraps around our code.
#Python uses the try statement to attempt to run the code and uses the except statement if the code returns some sort of error.

#Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. 
#Errors detected during execution are called exceptions and are not unconditionally fatal

#import logging

#integer = 50
#string = "The number is"

#try:
#    print(string + integer)
#except TypeError as err:
 #   logging.warning("Error - {}. You cannot add a string to an integer, without converting the integer to a string first".format(err))

#multiple type errors
#import logging

#integer = 50
#string = "The number is"

#try:
 #   print(string + integer)
#except TypeError as t_err:
 #   logging.warning("Error - {}. You cannot add a string to an integer, without converting the integer to a string first".format(t_err))
#except ValueError as v_err:
 #   logging.warning("Error - {}. Your message".format(v_err))

#Exceptions generated by AWS services are returned with Boto3 using botocore.
#Below is an example of an exception generated by AWS Boto3:

import logging
import boto3
from botocore.exceptions import ClientError

try:
    client = boto3.client('translate')
    <snip>
except ClientError as e:
    logging.warning("<your msg> {}".format(e))
